# ConvoNet model

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import cmath as cm
import math
import random
import sys


np.set_printoptions(threshold = sys.maxsize)
np.set_printoptions(suppress=True)

sources = 6
microphones = 64
grid_length = 12              # square grid
scanning_grid = grid_length*grid_length
training_samples = 50000
val_samples = 10000
pred_samples = 1
frequency = 100
no_of_epochs = 100
bs = 64

if grid_length%2 ==0:
  exit("grid_length must be odd number")

# coordinates of scanning plane

x_glob=np.linspace(-0.6,0.6,grid_length)
y_glob=np.linspace(0.6,-0.6,grid_length)
z_glob = 1.2


# Microphone array (shape is a logarithmic spiral)

def microphone_distribution(microphones,typeMic="log_spiral"):
  if typeMic=="log_spiral":
    a=0.018
    b=0.002
    turns=5
    micPos=np.linspace(0,turns*np.pi*2,microphones)
    micPos = np.degrees(micPos)
    x=a*np.cos(micPos)*np.exp(b*micPos)
    y=a*np.sin(micPos)*np.exp(b*micPos)
  else:
    print("not implemented")
  return x,y

# Creating the array

x_mic,y_mic = microphone_distribution(microphones)
z_mic = z_glob

# Generating training data (cross-spectral-matrix and ground-truth-matrix)

def data_gen(x_glob,y_glob,x_mic,y_mic,z_mic,grid_length,sources,microphones):
 gt = np.zeros((grid_length, grid_length))
 x1 = np.random.randint(0,grid_length-1,sources)
 y1 = np.random.randint(0,grid_length-1,sources)
 gt[y1,x1] = 1

 gt = np.array(gt.reshape(scanning_grid))
 x_source = x_glob[x1]
 y_source = y_glob[y1]

 p=np.empty(microphones,dtype=np.complex_)

 for i in range(microphones):
  rs = ((x_glob[x1]-x_mic[i])**2 + (y_glob[y1]-y_mic[i])**2 + z_mic**2)**0.5
  p[i] = np.sum(np.exp( (-2*1j*math.pi*frequency*rs)/343)/(4*math.pi*rs))
 p_H = np.conj(p)
 sample = np.dot(p[:,None],p_H[None,:])
 #sample = np.real(sample)
 sample = np.array(sample.reshape(microphones,microphones,1))
 return sample, gt


training_data = np.empty((training_samples,microphones,microphones,1),dtype=complex)
gtt = np.empty((training_samples,scanning_grid), dtype=int)

validation_data = np.empty((val_samples,microphones,microphones,1),dtype=complex)
gtv = np.empty((val_samples,scanning_grid), dtype=int)

pred_data = np.empty((pred_samples,microphones,microphones,1),dtype=complex)
gtp = np.empty((pred_samples,scanning_grid), dtype=int)

# Functions for training, validation and prediction data

def training_data_gen():
 for i in range(training_samples):
  training_data[i],gtt[i] = data_gen(x_glob,y_glob,x_mic,y_mic,z_mic,grid_length,sources,microphones)
 return training_data,gtt

def val_data_gen():
 for i in range(val_samples):
  validation_data[i],gtv[i] = data_gen(x_glob,y_glob,x_mic,y_mic,z_mic,grid_length,sources,microphones)
 return validation_data,gtv

def pred_data_gen():
 for i in range(pred_samples):
  pred_data[i],gtp[i] = data_gen(x_glob,y_glob,x_mic,y_mic,z_mic,grid_length,sources,microphones)
 return pred_data,gtp

##########################################################################################################
ut = training_data_gen()
uv = val_data_gen()
##########################################################################################################
# CNN

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(microphones,microphones,1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(scanning_grid))

opt = keras.optimizers.Adam(learning_rate=0.0001)
model.compile(optimizer=opt, loss='mean_squared_error', metrics=['mean_squared_error'])
model.summary()

############# Loading a previously trained model #######################
model = tf.keras.models.load_model('6S_100Hz_200iterations.h5')
   
ut1 = np.load('tsamples_50000_100Hz.npy')
ut2 = np.load('tlabels_50000_100Hz.npy')
uv1 = np.load('vsamples_10000_100Hz.npy')
uv2 = np.load('vlabels_10000_100Hz.npy')

#######################################################################
model.fit(ut[0],ut[1], validation_data = (uv[0],uv[1]), batch_size = bs, epochs = 400)
######################################################################################

# Prediction

from matplotlib import colorbar

up = pred_data_gen()
z1 = model.predict(up[0])

k1 = np.array(up[1])
z1= np.array(z1.reshape(pred_samples,grid_length,grid_length))
k1= np.array(k1.reshape(pred_samples,grid_length,grid_length))
# print(k1)
# print(z1)

# Filtering

z1 = z1.reshape(scanning_grid,1)
for i in range(scanning_grid):
 if z1[i] < 0.25:
  z1[i] = 0
z1 = z1.reshape(grid_length,grid_length)
k1 = k1.reshape(grid_length,grid_length)
print(k1)
print(z1)

fig , (ax1 , ax2)  = plt.subplots(1,2)
im1 = ax1.imshow(k1)
plt.colorbar(im1, ax=ax1, shrink = 0.35)
ax1.set_title('Ground Truth 6 Sources at 300 Hz')

im2 = ax2.imshow(z1)
# plt.colorbar(im1, ax=ax2)
plt.colorbar(im1,ax=ax2, shrink=0.35)
ax2.set_title('CNN Prediction 6 Sources at 300 Hz')

# plt.figure(figsize = (10,10))
fig.set_size_inches(10, 10)
plt.show()

####################################################################################

# Prediction statistics for 100 samples

from matplotlib import colorbar

c0 = 0
c1 = 0
c2 = 0
c3 = 0
c4 = 0
c5 = 0
c6 = 0

for i in range(1000):
  up = pred_data_gen()
  z1 = model.predict(up[0])

  k1 = np.array(up[1])
  z1= np.array(z1.reshape(scanning_grid,1))
  k1= np.array(k1.reshape(scanning_grid,1))
# print(k1)
# print(z1)

# Filtering
  counter = 0
  for i in range(scanning_grid):
    if z1[i] < 0.25:
      z1[i] = 0
    if bool(z1[i]) and bool(k1[i]) == True:
      counter = counter + 1

  if counter == 0:
    c0 = c0 + 1
  if counter == 1:
    c1 = c1 + 1
  if counter == 2:
    c2 = c2 + 1
  if counter == 3:
    c3 = c3 + 1
  if counter == 4:
    c4 = c4 + 1
  if counter == 5:
    c5 = c5 + 1
  if counter == 6:
    c6 = c6 + 1

#   print('Sources detected =',counter)
#   z1 = z1.reshape(grid_length,grid_length)
#   k1 = k1.reshape(grid_length,grid_length)

#   fig , (ax1 , ax2)  = plt.subplots(1,2)
#   im1 = ax1.imshow(k1)
#   plt.colorbar(im1, ax=ax1, shrink = 0.35)
#   # ax1.set_title('Ground Truth 6 Sources at 300 Hz')


#   im2 = ax2.imshow(z1)
# # plt.colorbar(im1, ax=ax2)
#   plt.colorbar(im1,ax=ax2, shrink=0.35)
#   # ax2.set_title('CNN Prediction 6 Sources at 300 Hz')

# # plt.figure(figsize = (10,10))
#   fig.set_size_inches(10, 10)
#   plt.show()

print('0S detected:',c0,'1S detected:',c1,'2S detected:',c2,'3S detected:',c3,'4S detected:',c4,'5S detected:',c5,'6S detected:',c6)
