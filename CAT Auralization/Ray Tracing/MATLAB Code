% Combined code for eigenrays and calculation of propagation parameters

tic
%% ---Checking ARTMatlab version---
AtmosphericRayTracer.Info();

%% ---Defininition of atmosphere---

atmos = StratifiedAtmosphere;

%Settings
%(These are the default settings, StratifiedAtmosphere is already initialized with these values)
atmos.windProfile = 'constant';          %String: 'zero', 'constant', 'log'
atmos.temperatureProfile = 'isa';   %String: 'constant', 'isa' (change to 'constant' for straight ray tracing)
atmos.humidityProfile = 'constant'; %String: 'constant'

atmos.surfaceRoughness = 0.1;       %Surface Roughness for Log Wind Profile [m]
atmos.frictionVelocity = 0.6;       %Friction velocity for Log Wind Profile [m/s]

atmos.constWindDirection = [1 1 0]; %Normal in wind direction []

atmos.constTemperature = 223.15;       %Temperature for Const mode [K]
atmos.constStaticPressure = 101325; %Static pressure used in a constant temperature profile

atmos.constWindVelocity = 20;       %Wind velocity for Const Wind Profile [m/s]

atmos.constRelHumidity = 50;        %Constant Realitive Humidity [%]

%% -----Trace Rays-----

art = AtmosphericRayTracer;
eg = AtmosphericRay;

%% Source and initial directions

v = 20; % interval (change to v = 10000 for range of detection plots)
v_plane = 200;
v_wind = 20;
c = 299.466; % speed of sound at the receiver (at 10 km altitude)
fs = 10; % source frequency 
r0 = 50000; (change to r0 = 100000 for range of detection plots)
r = -r0:v:r0; % source x-coordinate

sx = 0;
sy = 0;
sz = 10000;
rz = 10000;
ry = -1000;  (change to ry = -5000 for range of detection plots)

fo = zeros(length(r),1);
sploss = zeros(length(r),1);
td = zeros(length(r),1);

v_wx = v_wind*cosd(45); % only for [1,1,0] and [1,-1,0], x and y component

for i = 1:length(r)

source = [sx sy sz]; % source located at a height of 4 kilometers from the ground
receiver = [r(i) ry rz]; % receiver position

% Doppler Shift

deltaAngle = 10;
phi0 = 0:deltaAngle:360-deltaAngle;
theta0 = 90:deltaAngle:180;
[theta0, phi0] = meshgrid(theta0, phi0);
theta0 = [theta0(:); 180]; %adding south pole
phi0 = [phi0(:); 0];       %adding south pole

rayNormalVectors = AtmosphericRayTracer.AnglesToNormalVectors(theta0, phi0);

%% Ray tracing settings

%--General--

art.maxPropagationTime = 350;                    %Maximum propagation time of rays [s] (was 200 s)
art.integrationTimeStep = 0.5;                  %Base time-step for integration of rays [s]
art.solverMethod = 'runge-kutta';             %Maximum propagation time of rays [s]
art.maxReflectionOrder = 1;             %Maximum number of considered reflections (=number of eigenrays) [] (integer)
art.abortOnReceiverDistIncrease = true; %If enabled, ray tracing will be aborted as soon as ray receiver distance increases (boolean)

%--Adaptive ray zooming--
art.maxReceiverRadius = 1;              %Maximum value for receiver radius [m]
art.maxSourceReceiverAngle = 1;         %Maximum allowed angle between source and receiver sphere [°]
art.maxAngleForGeomSpreading = 0.01;    %Maximimum delta angle of initial direction of neighboring rays used for the calculation of the spreading loss [°]

art.abortMaxNAdaptations = 30;          %Abort criterion for adaptive ray zooming: maximum number of iterations [] (integer)
art.abortMinAngleResolution = 0.001;    %Abort criterion for adaptive ray zooming: minimum angular resolution of rays [°]

%% Run

% rays = art.TraceRays(atmos, source, rayNormalVectors);

%% Plotting rays from the source

% rays.plot();

%% ---Finding Eigenrays---

eigenrays = art.FindEigenrays(atmos, source, receiver);

%% Checking for accuracy of results
% isEigenray property is positive, since rays are result of an eigenray search
eigenrays(1).isEigenray
% The defined receiver sphere was hit and therefore the following property is true
eigenrays(1).receiverSphereHit

%% Getting angle from eigenray and doppler shift calculation

eg(i) = eigenrays(1);

a = eg(i).n;
a1 = a.n(eg(i).numPoints).x;
a2 = a.n(eg(i).numPoints).y;
a3 = a.n(eg(i).numPoints).z;

dp_p = a1*v_plane;
mod_p = sqrt(a1^2+a2^2+a3^2)*sqrt(v_plane^2);
cos_p(i) = abs(dp_p/mod_p);

dp_w = a1*v_wx + a2*v_wx;
mod_w = sqrt(a1^2+a2^2+a3^2)*sqrt(2*v_wind^2);
cos_w(i) = dp_w/mod_w;

c_eff = c + v_wind*cos_w(i);

% Doppler shift calculation

if r(i) <= 0
fo(i) = fs + fs*((v_plane*cos_p(i))/(c_eff));

end

if r(i) > 0
fo(i) = fs - fs*((v_plane*cos_p(i))/(c_eff));
end

% if r(i) == 0
% fo(i) = fs;
% end

%% Performance meta data
% FindEigenrays provides the total number of traced rays as optional second return value
[eigenrays, totalNumRays] = art.FindEigenrays(atmos, source, receiver);
% Each eigenray provides the number of iterations used during its ray zooming process
eigenrays(1).rayZoomingIterations;
% eigenrays(2).rayZoomingIterations;

% fprintf('Total number of traced rays...\n- Direct path: %i\n- Ground reflection: %i\nNumber of iterations used during adaptive ray zooming process...\n- Direct path: %i\n- Ground reflection: %i\n', totalNumRays(1), totalNumRays(2), eigenrays(1).rayZoomingIterations, eigenrays(2).rayZoomingIterations);

%% ---Calculation of Propagation Parameters---

%% ---Initializing Propagation Model---
%  ------------------------------------
propagationModel = AtmosphericPropagation;

%% Atmosphere
% It is important to use the same atmosphere as for the eigenray
% simulation.
propagationModel.atmosphere = atmos;

%% Frequency vector
samplingRate = 44100;
tMax = 3;
nBins = samplingRate*tMax/2;
propagationModel.frequencyVector = linspace(0, samplingRate/2, nBins);


%% Setting the reflection factor
% The ground reflection factor is required for the transfer function
% calculation. It is 1 by default. It can either be a singe value or a
% complex-valued vector with same length as the frequency vector.
propagationModel.groundReflectionFactor = 0.9 * ones(size(propagationModel.frequencyVector));

%% ---Auralization parameters---
%  -----------------------------

%% Geometrical spreading
% The spreading loss factor is calculated at the end of the eigenray
% search based on the Blokhintzev invariant. It is stored in a property
% of the eigenray.
spreadingLossDirect = eigenrays(1).spreadingLoss;
sploss(i) = spreadingLossDirect;
% spreadingLossReflection = eigenrays(2).spreadingLoss

%% Propagation delay
% The propagation delay is implicitely stored in the time vector of the
% eigenrays
tDelayDirect = eigenrays(1).t(end);%[s]
td(i) = tDelayDirect;
% tDelayReflection = eigenrays(2).t(end)  %[s]

%% Air attenuation
% The air attenuation is calculated by integrating the attenuation defined
% in ISO 9613-1 [dB/m] along the ray path.
attenuation = propagationModel.AirAttenuation(eigenrays);
end 

figure;
plot(eg); 
hold on; 
plot3(r, receiver(2), receiver(3), ' ok', 'MarkerFaceColor', [0 0.6 0]); 
% zlim([6000,13000]);
disp('Propagation time');
disp(td);
disp('Spreading loss');
disp(sploss);
figure;
plot(r,fo,'d');

% Atmospheric attenuation plot for the first ray (left extreme)
attenuation = propagationModel.AirAttenuation(eg);
attenuationITA = itaResult(attenuation(:,1), propagationModel.frequencyVector, 'freq');
attenuationITA.comment = 'Air attenuation';
attenuationITA.pf();

toc
